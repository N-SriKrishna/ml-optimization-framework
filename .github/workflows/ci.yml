name: ML Optimization Framework CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install CPU-only PyTorch
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
    
    - name: Install other dependencies
      run: |
        pip install protobuf
        pip install --no-deps -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Verify PyTorch installation
      run: |
        python -c "import torch; print(f'PyTorch: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}')"
    
    - name: Run tests with coverage
      env:
        PYTHONPATH: ${{ github.workspace }}
        CUDA_VISIBLE_DEVICES: ""
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term -k "not cuda and not gpu"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort
    
    - name: Check code formatting with black
      run: |
        black --check src/ tests/ || true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/ tests/ || true
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503 || true
